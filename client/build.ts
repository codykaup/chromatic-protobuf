/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: build.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class BuildRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        captureCount?: number;
        traceHeader?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("captureCount" in data && data.captureCount != undefined) {
                this.captureCount = data.captureCount;
            }
            if ("traceHeader" in data && data.traceHeader != undefined) {
                this.traceHeader = data.traceHeader;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get captureCount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set captureCount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get traceHeader() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set traceHeader(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: number;
        captureCount?: number;
        traceHeader?: string;
    }): BuildRequest {
        const message = new BuildRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.captureCount != null) {
            message.captureCount = data.captureCount;
        }
        if (data.traceHeader != null) {
            message.traceHeader = data.traceHeader;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            captureCount?: number;
            traceHeader?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.captureCount != null) {
            data.captureCount = this.captureCount;
        }
        if (this.traceHeader != null) {
            data.traceHeader = this.traceHeader;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.captureCount != 0)
            writer.writeInt32(2, this.captureCount);
        if (this.traceHeader.length)
            writer.writeString(3, this.traceHeader);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BuildRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BuildRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.captureCount = reader.readInt32();
                    break;
                case 3:
                    message.traceHeader = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BuildRequest {
        return BuildRequest.deserialize(bytes);
    }
}
export class BuildResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        status?: string;
    }): BuildResponse {
        const message = new BuildResponse({});
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status.length)
            writer.writeString(1, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BuildResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BuildResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BuildResponse {
        return BuildResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedBuildServiceService {
    static definition = {
        CreateBuild: {
            path: "/chromatic_capture_proto.BuildService/CreateBuild",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BuildRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BuildRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BuildResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BuildResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateBuild(call: grpc_1.ServerUnaryCall<BuildRequest, BuildResponse>, callback: grpc_1.sendUnaryData<BuildResponse>): void;
}
export class BuildServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedBuildServiceService.definition, "BuildService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    CreateBuild: GrpcPromiseServiceInterface<BuildRequest, BuildResponse> = (message: BuildRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<BuildResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.CreateBuild(message, metadata, options, (error: grpc_1.ServiceError, response: BuildResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
